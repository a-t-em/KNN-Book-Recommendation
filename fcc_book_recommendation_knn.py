# -*- coding: utf-8 -*-
"""fcc_book_recommendation_knn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HdwtfxWyACZa0wdoRBeHZRI6WbZEShhk
"""

# import libraries (you may add additional imports but you may not have to)
import numpy as np
import pandas as pd
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler
from sklearn.decomposition import TruncatedSVD

# get data files
!wget https://cdn.freecodecamp.org/project-data/books/book-crossings.zip

!unzip book-crossings.zip

books_filename = 'BX-Books.csv'
ratings_filename = 'BX-Book-Ratings.csv'

# import csv data into dataframes
df_books = pd.read_csv(
    books_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['isbn', 'title', 'author'],
    usecols=['isbn', 'title', 'author'],
    dtype={'isbn': 'str', 'title': 'str', 'author': 'str'})

df_ratings = pd.read_csv(
    ratings_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['user', 'isbn', 'rating'],
    usecols=['user', 'isbn', 'rating'],
    skiprows = 1,
    dtype={'user': 'int32', 'isbn': 'str', 'rating': 'float32'})

df = pd.merge(df_ratings, df_books, on = 'isbn')
df.head()

x = df.rating.values.reshape(-1, 1)
x_scaled = MinMaxScaler().fit_transform(x)
df['rating'] = pd.DataFrame(x_scaled)
print(df.head())

combine_book_rating = df.dropna(axis = 0, subset = ['isbn'])
book_rating_count = (combine_book_rating.groupby(by = ['isbn'])['rating'].count().reset_index().rename(columns = {'rating': 'total_ratings'})[['isbn', 'total_ratings']])
book_rating_count.head()

user_count = (combine_book_rating.groupby(by = ['user'])['rating'].count().reset_index().rename(columns = {'rating': 'total_reviews'})[['user', 'total_reviews']])
user_count.head()

rating_with_counts = combine_book_rating.merge(book_rating_count, left_on = 'isbn', right_on = 'isbn', how = 'left')
rating_with_counts.head()

rating_with_counts = rating_with_counts.merge(user_count, left_on = 'user', right_on = 'user', how = 'left')
rating_with_counts.head()

select_books = rating_with_counts.query('total_ratings >= 100')
select_books = select_books.query('total_reviews >= 200')
select_books.head()

le = LabelEncoder()
le.fit(select_books.isbn.values)
list(le.classes_)
select_books['isbn'] = le.transform(select_books.isbn.values).astype('int32')

le2 = LabelEncoder()
le2.fit(select_books.user.values)
list(le2.classes_)
select_books['user'] = le2.transform(select_books.user.values).astype('int32')

book_knn_df = select_books.pivot_table(index = 'isbn', columns = 'user', values = 'rating').fillna(0)
book_knn_df.head()

book_corr_df = select_books.pivot_table(index = 'user', columns = 'isbn', values = 'rating').fillna(0)
book_corr_df.head()

x = book_corr_df.values.T
print(x.shape)
SVD = TruncatedSVD(n_components = 100)
corr_matrix = SVD.fit_transform(x)
corr_matrix.shape

corr = np.corrcoef(corr_matrix)
corr.shape

knn_matrix = csr_matrix(book_knn_df.values)

n = 6
k5 = NearestNeighbors(metric = 'cosine', n_neighbors = n)
k5.fit(knn_matrix)

def get_recommends(book = ""):
  isbn_query = select_books[select_books.title == book].isbn.unique()
  i = book_knn_df.loc[isbn_query[0]]
  query = np.asarray(i)
  distances, indices = k5.kneighbors(query.reshape(1, -1), n_neighbors = n)
  recommends = [1, []]
  knn_corr = np.empty(n-1)
  for i in range(n):
    if i == 0:
      recommends[0] = book
    else:
      isbn_rec = book_knn_df.index[indices.flatten()[-i]]
      title = select_books[select_books.isbn == isbn_rec].title.unique()
      knn_corr[i-1] = corr[isbn_rec][isbn_query][0]
      knn_coeff = float(distances.flatten()[-i])
      recommends[1].append([title[0], knn_coeff, knn_corr[i-1]])
  print(recommends[1])
  correlations = np.sort(knn_corr)[::-1]
  rec = [1, []]
  rec[0] = book
  for i in range(5):
    for j in range(n-1):
      if recommends[1][j][2] == correlations[i]:
        rec[1].append([recommends[1][j][0], recommends[1][j][1]])
  return rec

def test_book_recommendation():
  test_pass = True
  recommends = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
  print(recommends)
  if recommends[0] != "Where the Heart Is (Oprah's Book Club (Paperback))":
    test_pass = False
  recommended_books = ["I'll Be Seeing You", 'The Weight of Water', 'The Surgeon', 'I Know This Much Is True']
  recommended_books_dist = [0.8, 0.77, 0.77, 0.77]
  for i in range(2): 
    if recommends[1][i][0] not in recommended_books:
      test_pass = False
    if abs(recommends[1][i][1] - recommended_books_dist[i]) >= 0.05:
      test_pass = False
  if test_pass:
    print("You passed the challenge! 🎉🎉🎉🎉🎉")
  else:
    print("You haven't passed yet. Keep trying!")

test_book_recommendation()